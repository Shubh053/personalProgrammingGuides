NOTES
------
1. == => means content comparison and is ==> means reference comparison.
2. chr(unicode) ==> character and ord(char) ==> unicode
3. list cannot be used as key for dictionary but tuple can be used as a key.


INTRODUCTION TO PYTHON
-----------------------
1. Python was developed by Guido Van Rossam in 1989 in National Institute Of Research in Neitherland.
2. Python officially released in 20th Feb 1991.
3. Python is named after Monty Python's Circus show in BBC.
4. Procedural or functional programming is picked by C language.
5. OOP programming is picked by C++ language.
6. Scripting programming is picked by Pearl and Shell.
7. Modular programming is picked by Modula-3.
8. Python syntax is inspired by C and ABC language.



FEATURES OF PYTHON
-------------------
1. Simple and easy to learn
2. Free to use and open source
3. High level programming language
4. Platform independent
5. Portability
6. Dynamically typed language
7. Procedural and Object Oriented language
8. Interpreted
9. Extensible
10. Embedded
11. Extensive library



LIMITATIONS OF PYTHON
----------------------
1. Performance
2. Mobile applications



FLAVORS OF PYTHON
------------------
1. CPython (Standard version) - to work with c language
2. Jython or JPython - to work with java language
3. IronPython - to work with c# language
4. Pypy - for more performance bcoz it have JIT compiler by default
5. RubyPython - to work with ruby language
6. AnacondaPython - to handle big data
7. Stackless (Python for concurrency) - for multithreading



PYTHON VERSIONS
----------------
1. Python 1.0 introduced in jan 1994
2. Python 2.0 introduced in oct 2000
3. Python 3.0 introduced in dec 2008



RULES TO DEFINE IDENTIFIERS
----------------------------
1. Alphabet symbols (both upper and lower case), Digits (0 to 9), Underscore (_)
2. Idenitfier should not start with digit
3. Python is case-sensetive
4. No length limit for python identifiers
5. If identifier starts with _ indicates private
6. If identifier starts with __ indicates strongly private
7. Starts with __ and ends with __ symbol indicates it is language specific identifier



RESERVED WORDS
---------------
1. 33 reserved words
2. True, False, None
3. and, or , not, is
4. if, else, elif
5. while, for, break, continue, return, in, yield
6. try, except, finally, raise, assert
7. import, from, as, class, def, pass, global, nonlocal, lambda, del, with
8. import keyword  
   keyword.kwlist()  # to print keyword list



DATA TYPES
-----------
1. int => binary (0 and 1) 0b, decimal (base-10 0 to 9), octal (0 to 7) 0o, hexadecimal (0 to 9, a to f / A to F) 0x
2. float
3. complex => can't be converted to int or float using type casting
4. bool
5. str
6. bytes => immutable
7. bytearray => mutable
8. range => immutable
9. list => ordered, duplicates allowed, mutable
10. tuple => ordered, duplicates allowed, immutable
11. set => unordered, duplicates not allowed, mutable
12. frozenset => unordered, duplicates not allowed, immutable
13. dict => unordered, key duplicates not allowed but values can be duplicates, mutable
14. None



TYPE CASTING / TYPE COERSION
-----------------------------
1. int() => any other fundamental data type can be converted to int except complex and if it's a string then it should be compulsory base-10
2. float() => any other fundamental data type can be converted to float except complex and if it's a string then it should be compulsory base-10
3. complex() => there are two forms of type casting in complex:
                1. complex(x) => here x will be the real part
                2. complex(x, y) => here x will be the real part and y will be the imaginary part, if it's a string then 2nd argument will throw TypeError.
4. bool() => for int and float type, 0 means False and all other non-zero value means True. for complex if both real and imaginary part is 0 then False. for string if arg is empty then False.
5. str() => 




INBUILT FUNCTIONS
------------------
1. print()
2. type()
3. id()



ESCAPE CHARACTERS
------------------
1. \n
2. \t
3. \r
4. \b
5. \v
6. \f
7. \'
8. \"
9. \\



TYPES OF OPERATORS
-------------------
1. Arithmetic Operators
2. Relational Operators or Comparison Operators
3. Logical Operators
4. Bitwise Operators
5. Assignment Operators
6. Special Operators



ARITHMETIC OPERATORS
---------------------
1. + ==> addition
2. - ==> subtraction
3. * ==> multiplication
4. / ==> division returns float value only
5. % ==> modulo
6. // ==> floor division returns nearest float value if arguments are float and returns int value if arguments are int
7. ** ==> exponent



RELATIONAL OPERATORS
---------------------
1. >
2. <
3. >=
4. <=
5. ==
6. !=



LOGICAL OPERATORS
------------------
1. and ==> x and y if x evalutes to false then result is x otherwise returns y
2. or ==> x or y if x evaluates to True then returns x otherwise return y
3. not ==> it always returns boolean value
* for booleans ==> boolean value
  for non-boolean ==> 0 means False, non-zero means True, empty string means False



BITWISE OPERATORS
------------------
1. & ==> if both bits are 1 then only 1 otherwise 0
2. | ==> if atleast one bit is 1 then 1 otherwise 0
3. ^ ==> (x-or / exclusive or)if both arguments are different then 1 otherwise 0
4. ~ ==> (bitwise complement operator) 1 => 0 and 0 => 1
5. << ==> (bitwise left shift) right hand side vacant cells fill with 0s
6. >> ==> (bitwise right shift) left hand side vacant cells fill with sign bit i.e, +ve numbers = 0 and -ve numbers = 1
* applicable only for int and boolean



ASSIGNMENT OPERATORS
---------------------
1. =
2. +=
3. -=
4. *=
5. /=
6. %=
7. //=
8. **=
9. &=
10. |=
11. ^=
12. >>=
13. <<=



SPECIAL OPERATORS
------------------
1. Identity Operators ==> is, is not
2. Membership Operators ==> in, not in



OPERATOR PRECEDENCE
--------------------
1. () ==> Paranthesis
2. ** ==> exponential operator
3. ~,- ==> unary operator
4. *,/,%.//
5. +,-
6. <<,>>
7. &
8. ^
9. |
10. >,>=,<,<=,==,!= ==> relational operator
11. =,+=,-=,*=.... ==> assignment operator
12. is, is not ==> identity operator
13. in, not in ==> membership operator
14. not
15. and
16. or



eval() ==> This function always take string type and evaluates to corresponding result.



COMMAD LINE ARGUMENTS
----------------------
1. argv ==> takes a list of commands and index starts from python file itself. eg, python3 test.py 10 20 30 40, argv[0] = test.py



OUTPUT FUNCTIONS
-----------------
1. sep attribute ==> takes a string value to use as a seperator between values eg, print(10,20,30, sep=',') = 10,20,30
2. end attribute ==> takes a string value to use as a endline seperator
3. formatted string ==>
   i) %i ==> int type
   ii) %d ==> int type
   iii) %f ==> float
   iv) %s ==> str type
4. replacement operator ==> {} is used with .format



FLOW CONTROL
-------------
3 types:

1. Conditional statements/selection statements
-----------------------------------------------
1. if
2. if-else
3. if-elif-else
4. if-elif

2. Iterative statements
------------------------
1. for loop
2. while

3. Transfer statements
-----------------------
1. break
2. continue
3. pass



STRING DATA TYPE METHODS
-------------------------
Index find
-----------
1. find(substr, beg, end) ==> it returns the index of substring in string and returns -1 if no such index exist.
2. rfind(substr, beg, end) ==> returns last index where substring found and returns -1 if no such index exist.
3. index(substr, beg, end) ==> same as find method but it raises an exception when substring not found.
4. rindex(substr, beg, end) ==> same as index except it returns last index.
5. count(substr, beg, end) ==> returns the number of occurrences of substring in the string.

Changing case of strings
-------------------------
1. capitalize() ==> capitalizes the first letter of string.
2. upper() ==> to convert to upper case.
3. lower() ==> to convert to lower case.
4. swapcase() ==> interchanging case of all letters in string.
5. title() ==> first characters of all the words are capitalized.

String manipulation
--------------------
1. center(width, fillchar) ==> returns a space-padded string with the original string centered to a total of width coulmns.
2. lstrip() ==> removes beginning space from the string.
3. rstrip() ==> removes end space from the string.
4. strip() ==> removes beginning and end space from the string.
5. replace(oldstring, newstring, max) ==> returns a copy of the string in which occurrence of old is replaced with new, optionally restricting the no. of replacements to max.
6. split(seperator, num) ==>  returns list of substring and takes num argument optionally.
7. rsplit(seperator, num) ==> same as split except it starts from reverse direction.
8. join(sequence) ==> returns a string after joining string of sequence from tuple or list.

Checking starting and ending part of the string
------------------------------------------------
1. startswith(str, beg, end) ==> returns true of false based on string matching.
2. endswith(str, beg, end) ==> returns true or false based on string matching.

Checking certain conditions
----------------------------
1. isalnum() ==> returns true or false after checking wheather the string consists of only digits and letters characters.
2. isalpha() ==> returns true or false after checking wheather the string consists of only alphabetic characters.
3. isdigit()
4. isnumeric() ==> applicable on only unicode objects.
5. islower()
6. isupper()
7. istitle()
8. isspace()
9. isdecimal() ==> applicable on only unicode objects.



LIST DATA TYPE FUNCTIONS
-------------------------
1. len(list) ==> gives the total length of list.
2. max(list) ==> returns item from the list with max value.
3. min(list) ==> returns item from the list with min value.
4. cmp(list1, list2) ==> compares elements of both list.
5. list(seq) ==> converts a tuple into list.
6. clear() ==> to clear all elements of the list.

LIST DATA TYPE METHODS
-----------------------
1. count(obj) ==> returns count of how many times obj occurs in list.
2. append(obj) ==> append object to list.
3. index(obj) ==> returns the lowest index in the list that object appears.
4. insert(index, element) ==> it doesn't returns anything but inserts the element at the specified index.if the specified index is greater than current max index than element will be inserted at last index and if it's less than 0 than it will be inserted at 1st position.
5. extend(seq) ==> appends content of seq to list.
6. remove(obj) ==> doesn't returns anything but removes the object from the list.
7. pop(obj = list[-1]) ==> removes and returns last object or object from the list. obj is the optional parameter, index of the object to be removed.
8. reverse() ==> doesn't returns anything but reverse the objects of the list.
9. sort([func]) ==> doesn't returns any value but it changes from the original list.
10. cmp(list1, list2) ==> works in python 2 not in python 3, for python 3 use (a>b)-(a<b) instead of cmp(a,b)

LIST COMPREHENSIONS
--------------------
1. list = [expression for x in sequence if condition]



TUPLE DATA TYPE FUNCTIONS
--------------------------
1. tuple(seq) ==> converts list into tuple.
2. len(tuple)
3. count(obj)
4. index(obj)
5. sorted(tuple) ==> returns sorted list.
6. min(tuple)
7. max(tuple)
8. cmp(tuple1, tuple2)



SET DATA TYPE METHODS
----------------------
* index and slice operator are not aplicable.
1. add(obj) ==> adds the object in the set.
2. update(sequence) ==> it's like extend method of list, it adds the sequence into the set.
3. copy() ==> returns copy of set.
4. pop() ==> removes and returns some random element.
5. remove(obj) ==> doesn't returns any value and removes the object from the list.If specified object is not the set then KeyError will come.
6. discard(obj) ==> doesn't returns any value and removes the object from the list if present, if not then ignored i.e, no error raised.
7. clear() ==> to remove all elements from the set.

SET MATHEMATICAL OPERATIONS
----------------------------
1. union() or | ==> returns a union of two sets which have all elements from both the sets.
2. intersection() or & ==> returns a set which have elements which are present in both the sets.
3. difference() or - ==> returns a set containing all the elements of 1st set but not 2nd set.
4. symmetric_difference or ^ ==> returns a set that contains all items from both sets, except items that are present in both sets.
5. difference_update() ==> removes the items that exist in both sets. its diffrent from difference() method, because the difference() returns a new set and difference_update() removes the unwanted items from the original set.
6. intersection_update() ==> removes the unwanted items i.e, which are not present in both sets from the original set.
7. symmetric_difference_update() ==>
8. isdisjoint() ==> returns true if none of the items are present in both sets.
9. issubset() ==> returns true if all items in the 1st set exists in the 2nd set.
10. issuperset() ==> returns true if all items of 2nd set are present in 1st set.

SET COMPREHENSIONS
-------------------
1. set = {expression for x in sequence if condition}



DICTIONARY DATA TYPE METHODS
-----------------------------
* index and slice operator not applicable.
* dict(list or set or tuple of tuples)
1. has_key(key) ==> returns true if key present otherwise false, applicable only in python 2 not in python 3.
2. len()
3. clear() ==> to remove all key-value pairs from the dictionary.
4. get(key, default=None) ==> returns a value for the given key. If key is not available then returns default value None.
5. pop(key) ==> removes the entry associated with the key and returns the value. Takes atleast 1 argument.
6. popitem() ==> remove and return random key-value.
7. keys() ==> returns a list of all the available keys in the dictionary.
8. values() ==> returns a list of all available values in the dictionary.
9. items() ==> returns a list of key-value tuple pairs.
10. copy() ==> returns a shallow copy of dictionary.
11. setdefault(key, value) ==> if key already availabe then it returns that value otherwise set and returns the given value. value argument by default is None like get() method.
12. update(dict2) ==> adds dictionary dict2's key-value pairs to 1st dict. this function does not return anything. Takes atmost 1 argument.
13. fromkeyes(seq, value) ==> creates a new dictionary with keys from seq and values set to value, value by default is None.

DICTIONARY COMPREHENSION
-------------------------
1. dict = {key:value expression for x in sequence if condition}



FUNCTIONS
----------

TYPES OF ARGUMENTS
-------------------
1. positional
2. keyword
3. default
4. variable length args ==> def xyz(*args). it's a tuple.
5. keyword variable length args ==> def xyz(**kwargs). it's a dictionary.

RECURSIVE FUNCTIONS
--------------------
1. A function that calls itself recursive functions.

ANONYMOUS FUNCTIONS
--------------------
1. lambda input:expression

FUNCTIONS EXPECTING ANOTHER FUNCTION AS ARGUMENTS
--------------------------------------------------
1. filter() ==> filter(function, sequence), this is used to filter out elements from the sequence based on true or false condition by using function.
2. map() ==> map(function, sequence), for performing a functionality on every element of sequence map function is used.it can be applied on multiple sequence too but every sequence should have same number of elements if not equal then extra elements will be ignored.
3. reduce() ==> reduce(function, sequence), is used to apply a particular function passed in its argument to all of the list elements.it takes first two elements of sequence and result obtained next it apply the same function to previous result and next element, this process is continued till no element left in sequence then the final result is printed.

NESTED FUNCTIONS
-----------------

FUNCTION DECORATORS
--------------------
1. A decorator is a function which takes another function as input and gives a function as output with added functionality.
2. To automatically call decorator then use @decor function.



MODULES
--------
1. A group of functions and variables saved to a file.
2. import module1 ==> importing single module
3. import module1,module2,module3 ==> importing multiple module
4. import module1 as m1 ==> aliasing the module
5. from module1 import add ==> importing a function from module
6. from module1 import add,x,product ==> importing multiple functions from module
7. from module1 import * ==> import all functions from module
8. from module1 import add as a ==> aliasing the imported function

RELOADING THE MODULE
---------------------
1. for every module compiled file i.e, PYC file will be generated and saved in __pycache__
2. from imp import reload

SPECIAL VARIABLE __name__
--------------------------
1. if __name__ == __main__ then program is executed directly otherwise it is executed as a module from other program indirectly.

RANDOM MODULE
--------------
1. random() ==> 0 to 1 => not inclusive
2. randint(x,y) ==> int => inclusive
3 uniform(x,y) ==> float => not inlcusive
4. randrange(start, stop, step) ==>
5. choice(sequence) ==> return a random object from any indexable sequence.



TRY-EXCEPT-ELSE-FINALLY
------------------------
1. else block will be executed only when no exception in except block.
2. finally block will execute always wheather exception raised or not raised, handled or not handled.
3. with try block either except or finally block is compulsory.
4. try-1, except-multiple, else-1, finally-1 blocks allowed in a chain.
5. for else block except block must be there.
6. finally without try is invalid.
7. except without try is invalid.
8. we can nest try-except-else-finally in try,except,else,finally blocks.



TYPES OF EXCEPTIONS
--------------------
1. Predefined exceptions/ Inbuilt exceptions
2. User defined exceptions

Predefined exceptions/ Inbuilt exceptions
------------------------------------------
1. The exceptions which are raised automatically by python whenever a particular event occurs. eg, ZeroDivisonError, ValueError etc

User defined exceptions
------------------------
1. Make a class to define the exception then raise it. 
   eg, class TooYoungException(Exception):
           def __init__(self, arg):
               self.msg = arg

       input(int("Enter your age: "))
       if age > 60:
           raise TooYoungException("Too young to get married")



LOGGING and DEBUGGING
----------------------

LOGGING LEVELS
---------------
* If we don't set logging level by default critical,error,warning will be set.
1. CRITICAL ==> 50
2. ERROR ==> 40
3. WARNING ==> 30
4. INFO ==> 20
5. DEBUG ==> 10
6. NOTSET ==> 0

HOW TO IMPLEMENT LOGGING
-------------------------
1. name of the file
2. level messages
3. to define above two steps we have to use basicConfig() function of logging module.
4. logging.basicConfig(filename='log.txt', level=logging.WARNING)



PICKLING AND UNPICKLING
------------------------
1. The method of writing state of an object to a file is called pickling.
2. The method of reading state of an object from a file is called unpickling.
3. use pickle module
4. for pickling use pickle.dump(object, file) function.
5. for unpickling use pickle.load(file) function.



OOP'S CONCEPT
--------------
1. Class ==> Blueprint/Template which contains methods.
2. Object ==> are the instance of the class.
3. Reference variable ==> The variable that refers to the object is called reference variable of that object.
4. To print document string of a class use print(class.__doc__)

SELF VARIABLE
--------------
1. self is a reference variable which always pointing to current object. To access current object within class we use self variable.
2. For every instance method and constructor first argument should be self.
3. PVM is responsible for value for self argument and we are not needed to provide explicitly.
4. self is not a keyword.
5. Instead of self we can use any name but recommended to use self.

CONSTRUCTOR
------------
1. Name of the constructor is always fixed as __init__().
2. Whenever we are creating object constructor will be executed automatically.
3. We are not required to call explicitly.
4. The main objective: to decalre and initialize variables.
5. For every object, constructor will be executed only once.

METHOD VS CONSTRUCTOR
----------------------
METHOD
-------
1. Name can be anything.
2. Method will be executed if we call.
3. Per object method can be called any number of times.
4. Used for logics.

CONSTRUCTOR
------------
1. Name must be __init__().
2. Constructor executed automatically when creating object.
3. Per object only once.
4. To declare and initialize instance variables.


TYPES OF VARIABLES IN PYTHON CLASS
-----------------------------------
1. Instance/Object level variables
2. Static/Class level variables
3. Local/Method variables

INSTANCE VARIABLES
-------------------
1. If the value of a varible varies from object to object such type of variables are called instance variable.
2. For every object a seperate copy of instance variable will be created.
3. To declare instance variable:
   (i) Inside construtor by using self.
   (ii) Inside instance method by using self.
   (iii) From outside of the class by using object reference.
4. How to access instance variable:
   (i) Within the class by using self.
   (ii) From outside of the class by using object reference.
5. How to delete instance variable:
   (i) Within the class use del self.variablename
   (ii) Outside of the class by using del objectreference.variablename

STATIC VARIABLE
----------------
1. For all objects a single copy is maintained at class level.
2. To declare static variable:
   (i) Directly inside the class.
   (ii) Inside constructor method by using classname.
   (iii) Inside instance method by using classname.
   (iv) Inside class method by using cls variable or classname.
   (v) Inside static method by using classname.
   (vi) From oustide of class by using classname.
3. How to access static variable:
   (i) Within the class we can access by using classname or self variable.
   (ii) Inside classmethod we can also use cls variable.
   (iii) From outside of class we can access only by using classname or by object reference.
4. How to modify static variable:
   (i) Within the class we should use either classname or cls variable.
   (ii) From outside of the class use classname.
5. How to delete static variable:
   (i) Within the class we should use either classname or cls variable.
   (ii) From outside of the class use classname.

LOCAL VARIABLE
---------------
1. Used for temporary operations inside a method.
2. We should not use self,classname,cls.
3. Cannot be accessed from oustide of the method where it is defined.


TYPES OF METHODS IN PYTHON CLASS
---------------------------------
1. Instance/Object related methods
2. Class level method ==> @classmethod decorator is used.
3. Static ==> @staticmethod decorator is used.

INSTANCE METHODS
-----------------
1. Inside a method if atleast one instance variable is used.
2. 1st argument must be self variable.
3. Within the class we can call by using self.
4. Outside of class we can call by object reference.

SETTER AND GETTER METHODS FOR INSTANCE METHOD
----------------------------------------------
1. Used for data security.
2. def setVariableName(self,variableName):
       #Validation stuff can be used here
       self.variableName=variableName
  
   objectreference.setVariableName(values)
3. def getVariableName(self):
       #Validation stuff can be used here
       return self.variableName

   objectreference.getVariableName()

CLASS METHOD
-------------
1. Inside the method if we are using only static variable then we should declare that as class method.
2. To declare classmethod compulsory @classmethod decorator is used.
3. First argument is cls which is reference variable current class object and by using that we can access static variable.
4. Inside classmethod we can access only static variable not instance variable.
5. We can call classmethod either by using object reference or by classname directly, but recommended to use classname.

STATIC METHOD
--------------
1. Just general utility method.
2. If we are not using any instance variable and any static variable inside method body, to define such type of general utility methods we should go for staticmethod.
3. To declare staticmethod optonally use @staticmethod decorator.
4. We can call staticmethod either by using object reference or by classname directly, but recommended to use classname.


INNER CLASSES
--------------
1. The class which is declared inside another class is called inner classes.
2. Without existing one type of object if there is no chance of existing another type of object then we should go for inner classes.
3. To create an object from inner class use reference of outer class.
   eg, o = Outer()
       i = o.Inner()


GARBAGE COLLECTION
-------------------
1. Based on our requirement we can enable or disable garbage collection in python.
2. to enable or disable garbage collector gc module is used.
3. gc.isenabled() checks for gc is enabled or disabled.
4. gc.disable() to disable gc.
5. gc.enable() to enable gc.
6. gc calls destructor method(__del__(self):) automatically to close db connection,network connection etc before destroying useless object.
7. To get total reference of an object at that point of time use getrefcount() method of sys module, eg. t1 = Test()
            t2 = t1
            t3 = t2
            t4 = t3
            print(sys.getrefcount(t1)) # output = 5 #t1 t2 t3 t4 and self


POLYMORPHISM
-------------
1. Basic meaning of polymorphism means one name but mulitple forms.


OPERATOR OVERLOADING
---------------------
1. Operator overloading concept internally implemented by using magic method.
2. + ==> __add__(self,other): return self.variable + other.variable
3. - ==> __sub__(self,other): return self.variable - other.variable
4. * ==> __mul__(self,other): return self.variable * other.variable
5. / ==> __div__(self,other): return self.variable / other.variable
6. // ==> __floordiv__(self,other)
7. % ==> __mod__(self,other)
8. ** ==> __pow__(self,other)
9. += ==> __iadd__(self,other)
10. -= ==> __isub__(self,other)
11. *= ==> __imul__(self,other)
12. /= ==> __idiv__(self,other)
13. //= ==> __ifloordiv__(self,other)
14. %= ==> __imod__(self,other)
15. **= ==> __ipow__(self,other)
16. > ==> __gt__(self,other)
17. < ==> __lt__(self,other)
18. >= ==> __ge__(self,other)
19. <= ==> __le__(self,other)
20. == ==> __eq__(self,other)
21. != ==> __ne__(self,other)
22. To get meaningful representation of instance of object use def __str__(self) magic method.THis method gets called when printing any object reference/object.

METHOD OVERLOADING
-------------------
1. Method overloading is when two methods of same name but different argument types, that's why python does not support method overloading bcoz in python we don't declare types.


COMPOSITION VS AGGREGRATION
----------------------------
1. Both have HAS-A relationship.
2. Composition is a strong association and aggregration is a weak association.
3. Relation between class and instance method or object is example of composition and relation between class and static variable is example of aggregration.


TYPES OF INHERITANCE
---------------------
1. Single Inheritance
2. Multi Level Inheritance
3. Hierarchical Inheritance
4. Multiple Inheritance
5. Hybrid Inheritance
6. Cyclic Inheritance # Python doesn't support

SINGLE INHERITANCE
-------------------
1. One parent and One child.

MULTILEVEL INHERITANCE
-----------------------
1. Single inheritance at multi level.

HIERARCHICAL INHERITANCE
-------------------------
1. One parent but multiple childs at same level.

MULTIPLE INHERITANCE
---------------------
1. Multiple parents but single child.
2. Multiple inheritance works on based on order of parent class like C(P1,P2) then P1 method is considered if same name, C(P2,P1) then P2 method is considered if same name.


METHOD RESOLUTION ORDER(MRO) ALGORITHM FOR INHERITANCE
-------------------------------------------------------
1. use mro() method to get method resolution order of a class.
2. eg, class A(Object): pass          mro(A) = A,O
       class B(Object): pass          mro(B) = B,O
       class C(Object): pass          mro(C) = C,O
       class X(A,B): pass             mro(X) = X,A,B,O
       class Y(B,C): pass             mro(Y) = Y,B,C,O
       class P(X,Y,C): pass           mro(P) = P,X,Y,C,A,B,O

C3 ALGORITHM
-------------
       mro(P) = P + Merge(mro(X),mro(Y),mro(C),XYC)
       mro(P) = P + Merge(XABO,YBCO,CO,XYC)
1. First element is considered as head and rest all is considered tail, eg. in XABO, X is the head and all other element is the tail.
2. If head element of first list not present in the tail part of any other list then consider that element in the result and remove that element from all the lists.
       mro(P) = P + X + Merge(ABO,YBCO,CO,YC)
       mro(P) = P + x + A + Merge(BO,YBCO,CO,YC)
3. If head element is present in tail part of other list then we skip to next list.
       mro(P) = P + X + A + Y + Merge(BO,BCO,CO,C)
4. Then we again repeat from the first list.
       mro(P) = P + X + A + Y + B + Merge(O,CO,CO,C)
       mro(P) = P + X + A + Y + B + C + Merge(O,O,O)
       mro(P) = P + X + A + Y + B + C + O


SUPER() METHOD
---------------
1. From child class to call parent class members.
2. eg, class Person:
    	   def __init__(self,name,age):
               self.name = name
               self.age = age
           def display(self):
               print('Name:',self.name)
               print('Age:',self.age)

	class Student(Person):
            def __init__(self,name,age,rollno,marks):
                super().__init__(name,age)
                self.rollno = rollno
                self.marks = marks
            def display(self):
                super().display()
                print('Rollno:',self.rollno)
                print('Marks:',self.marks)
3. To call a particular parent class method by using super():
   (i) parentclassname.methodname(self)
   (ii) super(parentclassname,self).methodname()
4. From child class by using super() we cannot call parent class instance variables, we should use self only.
5. From child class by using super() method we can call parent class static variables.



REGULAR EXPRESSIONS
--------------------
1. re module is used for regular expressions.
2. To create a reg exp object use .compile() function.
3. Use finditer() function to create a iterable object to search pattern in.
4. start() ==> start index of the match.
5. end() ==> end+1 index of the match.
6. group() ==> returns one or more subgroups of the match.
7. groups() ==> return a tuple containing all the subgroups of the match.
8. groupdict() ==> returns a dictionary containing all the named subgroups of the match, keyed by the subgroup name.
9. ^a ==> it will check wheather the given target string starts with a or not.
10. a$ ==> it will check wheather the given target string ends with a or not.
11. re.IGNORECASE ==> use this attribute as a argument in functions of re module to ignore case-sensetive to match.

CHARACTER CLASSES
------------------
1. [abc] ==> either a or b or c
2. [^abc] ==> except a and b and c
3. [a-z] ==> any lower case alphabet symbols
4. [A-Z] ==> any upper case alphabet symbols
5. [a-zA-Z] ==> any alphabet symbols
6. [0-9] ==> any digit
7. [a-zA-Z0-9] ==> any alphanumeric character
8. [^a-zA-Z0-9] ==> any special character symbol

PREDEFINED CHARACTER CLASSES
-----------------------------
1. \s ==> space character
2. \S ==> except space character
3. \d ==> any digit
4. \D ==> except digits
5. \w ==> any word character
6. \W ==> any character except word character(means special character)
7. . ==> every character

QUANTIFIERS
------------
1. The number of occurrences.
2. a ==> exactly one 'a'
3. a+ ==> atleast one 'a'
4. a* ==> any number of 'a's including zero number also
5. a? ==> atmost one 'a'
6. a{n} ==> exactly n number of a's
7. a{m,n} ==> minimum m number of a's and maximum n number of a's

IMPORTANT FUNCTIONS OF RE MODULE
---------------------------------
1. match() ==> to check the given pattern match at the beginning of the target string or not,if yes then returns the match object if not then returns None.
2. fullmatch() ==> to check the given pattern match the complete target string or not, if yes then returns the match object if not then returns None.
3. search() ==> to search the given pattern in the target string, returns match object of the first occurance if not then returns None.
4. findall() ==> same as search but finds all occurances of the match string and returns a list.
5. finditer() ==> returns iterator of matched object.
6. sub() ==> substitution or replacement(re.sub(regex,replacement,targetstring))
7. subn() ==> returns tuple with (replaced string,number of replacements)
8. split() ==> to split the target string according to the pattern. Note: to split with '.' use '\.' or '[.]' bcoz alone '.' will be considered as quantifier for every character.
9. compile()



SHALLOW COPY AND DEEP COPY
---------------------------

SHALLOW COPY- If the original object contains any reference to mutable objects, just duplicate  reference variables will be created pointing to old contained objects, but not duplicate objects creation.
If original object does not contain any nested object then shallow copy is recommended.

DEEP COPY- All duplicate objects will be created even for nested mutable objects.
If original object contain any nested object then deep copy is recommended.



FILE HANDLING
--------------
1. open(filename,access mode) to open a file and perform a specific action.
2. close() to close the file after operations.
3. file.write(str)
4. file.writelines(list of lines)
5. file.read() ==> to read total data from the file.
6. file.read(n) ==> to read n characters from the file.
7. file.readline() ==> to read only one line.
8. file.readlines() ==> to read all lines into a list.
9. with statement ==> to automatically close the file after operations.
eg, with open('abc.txt','w') as f:
       ......
       ......
10. Use os.rename(current_file_name, new_file_name) method to rename file.
11. Use os.remove(file_name) method to delete the file.  

ACCESS MODES
-------------
1. r ==> opens a file for reading only.The file pointer is placed at the beginning of the file.This is the default mode.
2. w ==> opens a file for writing only,overwrited the file if the file exists.If the file doesn't exist then creates a new file for writing.
3. a ==> opens a file for appending.The file pointer is placed at the end of the file and if the file doesn't exist then creates a new file to write.
4. r+ ==> opnes the file for both reading and writing.The file pointer is placed at the beginning of the file.
5. w+ ==> opens a file for both reading and writing.If the file doesn't exist then it creates a file to write otherwise overwrites it.
6. a+ ==> opens a file for both appending and reading.The file pointer is at the end of the file if file exists.If the file doesn't exist then it creates a new file for reading and writing.
7. x(exclusive mode) ==> It is for write operation.Compulsory file should not be available.
8. rb ==> opens a file for reading only in the binary format.
9. rb+ ==> opens a file for both reading and writing in binary format.
10. wb ==> opens a file for writing only in binary format.
11. wb+ ==> opens a file for both reading and writing in binary format.
12. ab ==> opens a file for appending in binary format.
13. ab+ ==> opens a file for both appending and reading in binary format.
14. xb ==> opens a file for write operation in binary format.

FILE OBJECT ATTRIBUTES AND METHODS
-----------------------------------
1. file.closed ==> returns True if file is closed, False otherwise.
2. file.mode ==> returns access mode with which file was opened.
3. file.name ==> returns name of the file.
4. file.softcase ==> returns False if space explicitly required with print, True otherwise.
5. file.readable() ==> returns True if file is poosible to read otherwise False
6. file.writable() ==> returns True if file is poosible to write otherwise False.



MULTI THREADING
----------------
1. threading module is used.
2. current_thread() ==> this function returns current executing thread object.
3. active_thread() ==> returns the number of thread objects that are active.
4. enumerate() ==> returns a list of all current executing threads.
5. isAlive() ==> returns True or Flase based on thread is alive or not.
6. join(time) ==> to hold/wait the thread until some other threads are completed. time argument is optional.
7. ident ==> is a implicit variable to get the thread identification number.

3 WAYS TO DEFINE OWN THREAD
----------------------------
1. Creating a Thread without using any class.
2. Creating a Thread by extending Thread class.
3. Creating a Thread without extending Thread class.

SETTING AND GETTING THREAD NAME
--------------------------------
1. t.getName()
2. t.setName(name)

DAEMON THREADS
---------------
1. Sometimes threads may run in the background, these threads are called daemon threads.
2. The main purpose is to provide support for the non-daemon threads(like MainThread).
3. eg: Garbage Collector
4. isDaemon() | t.daemon ==> to check the thread is daemon or not.
5. setDaemon(bool) ==> this method is used to set the thread to daemon thread before starting the thread.
6. Whenever last non-daemon thread terminates automatically all daemon threads will be terminated we are not required to terminate explicitly.



GENERATORS
-----------
1. It is used to generate a sequence of values.
